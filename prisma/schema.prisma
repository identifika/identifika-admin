datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

generator client {
  provider = "prisma-client-js"
}

model users {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  name       String
  password   String
  active     Boolean      @default(false)
  role       String       @default("user")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  clients    clients[]
  queue_task queue_task[]
}

model faces {
  id                  String              @id @map("_id")
  user_name           String
  knn_indexing        Int
  face_representation FaceRepresentation?
  client_id           String              @map("client_id") @db.ObjectId
  client              clients             @relation(fields: [client_id], references: [id], onDelete: Cascade)

  @@map("faces")
}

type FaceRepresentation {
  embedding   Float[]
  facial_area FacialArea?
}

type FacialArea {
  x Int
  y Int
  w Int
  h Int
}

model clients {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  user_id             String             @map("user_id") @db.ObjectId
  client_name         String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  external_token      String
  user                users              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  faces               faces[]
  recognition_type    RecognitionType
  queue_task          queue_task[]
  recognition_types   recognition_types? @relation(fields: [recognition_typesId], references: [id], onDelete: SetNull)
  recognition_typesId String?            @db.ObjectId
  parent_id           String?            @db.ObjectId
  parent              clients?           @relation("ParentToChildren", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children            clients[]          @relation("ParentToChildren")

  @@map("clients")
}

type RecognitionType {
  face_detector    String
  face_model       String
  recognition_type String
}

model recognition_types {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  face_detector    String
  face_model       String
  recognition_type String
  clients          clients[]
}

model queue_task {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  task_id        String
  task_name      String
  status         String
  client_id      String   @map("client_id") @db.ObjectId
  client         clients  @relation(fields: [client_id], references: [id], onDelete: Cascade)
  user_id        String   @map("user_id") @db.ObjectId
  user           users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  message        String
  csv_error_file String?
  webhook_url    String?
  created_at     DateTime @default(now())
}
